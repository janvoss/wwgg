# Treiber des technologischen und des wirtschaftlichen Wandels

## Ökonomische Anreize und gesellschaftliche Wirkung

### Wisssenschaftlicher Wettbewerb

- Innovationsanreize (intrinsisch, karrieregetrieben)

- Marktfähigkeit der Innovationen abhängig von weiteren Bedingungen

- Schnelle Verbreitung von neuem Wissen im Wissenschaftssystem

- ggf. strategische Unterstützung durch den Staat (offen/gelenkt)

### Wirtschaftlicher Wettbewerb

- Unternehmerische Innovationsanreize

- Fokus auf Marktfähigkeit

- Verbreitung der Innovationen über Produkte oder Prozesse


### Gesellschaftliche Wirkung

- Pioniercharakter der Innovationen

  - Keine Vorherige Zustimmung
  
  - Risiko/Unsicherheit über Wirkungr
  
  - Hohe Gewinne möglich
  
- Grenzüberschreitende Wirkung

  - Verbreitung über offene Produkt- und/oder Faktormärkte
  
  - Nationaler vs. internationaler Regulierungsrahmen ($\rightarrow$ Global Governance)
  
## Patentanmeldungen


```{r Patente, echo=T, warning=F, message=F, cache=T, eval=T}

# Patente

library(tidyverse)
library(wbstats)

df <- wb_data(c("IP.PAT.RESD", "NY.GDP.MKTP.KD"))

p <- df %>% 
  filter(date==2020) %>% 
  ggplot(aes(x=NY.GDP.MKTP.KD, y=IP.PAT.RESD, group=country #für labels in ggplotly
             ))+
  geom_point(color="red")+
  geom_smooth(aes(group=NULL #, weight=NY.GDP.MKTP.KD
                  ))+
  scale_x_continuous(labels= function(x) format(x/1000000,scientific = F) , 
                     trans = "log10"
  )+
  scale_y_continuous(labels= function(x) format(x,scientific = F) , 
                     trans = "log10"
  )+
  labs(title= "Patentanmeldungen durch Einwohner, 2020",
       x="Bruttoinlandsprodukt",
       y= "Patentanmeldungen durch Inländer")
                     
# p

library(plotly)

ggplotly(p)%>%
  config(displaylogo = F) %>% 
  layout(margin = list(l = 50, r = 50, b = 100, t = 50),
         annotations = list(x = 1, y = -0.3, text =  paste('Abbildung: Jan S. Voßwinkel; Daten: World Bank; Datenabruf:', Sys.Date(), sep = " "),
                            xref='paper', yref='paper', showarrow = F, 
                            xanchor='right', yanchor='auto', xshift=0, yshift=0,
                            font = list(size = 11)))

```


```{r Patente2, echo=F, warning=F, message=F, cache=T, eval=T}

# Patente

library(tidyverse)
library(wbstats)

df <- wb_data(c("IP.PAT.RESD", 
                "NY.GDP.MKTP.KD",
                "SP.POP.TOTL"))

p <- df %>% 
  filter(date==2020) %>% 
  ggplot(aes(x=NY.GDP.MKTP.KD/SP.POP.TOTL, y=IP.PAT.RESD/SP.POP.TOTL, group=country #für labels in ggplotly
             ))+
  geom_point(color="red")+
  geom_smooth(aes(group=NULL, # weight=SP.POP.TOTL
                  ))+
  scale_x_continuous(labels= function(x) format(x,scientific = F) , 
                     trans = "log10"
  )+
  scale_y_continuous(labels= function(x) format(x*1000000,scientific = F) , 
                     trans = "log10"
  )+
  labs(title= "Patentanmeldungen durch Einwohner pro 1 Mio Einwohner, 2020",
       x="Bruttoinlandsprodukt pro Kopf",
       y= "Patentanmeldungen durch Inländer pro 1 Mio Einwohner")
                     
# p

library(plotly)

p1 <- ggplotly(p)%>%
  config(displaylogo = F) %>% 
  layout(margin = list(l = 50, r = 50, b = 100, t = 50),
         annotations = list(x = 1, y = -0.3, text =  paste('Abbildung: Jan S. Voßwinkel; Daten: World Bank; Datenabruf:', Sys.Date(), sep = " "),
                            xref='paper', yref='paper', showarrow = F, 
                            xanchor='right', yanchor='auto', xshift=0, yshift=0,
                            font = list(size = 11)))

# p1

```


## Technologische Paradigmen und Paradigmenwechsel

```{python}
#| eval: false

from graphviz import Digraph
from IPython.display import display

dot = Digraph()

# Layout
dot.attr(rankdir='LR')

# Hauptcluster erstellen
with dot.subgraph(name='cluster_abc') as cluster:
    cluster.attr(label='Paradigma', style='rounded', bgcolor='#F0F0F0')

    # Knoten außerhalb des Subclusters
    cluster.node('a', 'Basisdesign')
    cluster.node('c', 'Engpass')

    # Subcluster für "Weiterentwicklung"
    with cluster.subgraph(name='cluster_b') as subcluster:
        subcluster.attr(label='Weiterentwicklung', style='rounded', bgcolor='#E8E8E8')
        for node_id, label in {'b': 'inkrementelle Innovationen',
                               'b1': 'learning by doing',
                               'b2': 'implizites Wissen'}.items():
            subcluster.node(node_id, label)

        # Vertikale Anordnung der Knoten im Subcluster
        subcluster.body.append('{rank=same; b2 -> b1 -> b[style=invis]}')

# Einzelner Knoten außerhalb des Hauptclusters
dot.node('d', 'Paradigmenwechsel')

# Kanten definieren
edges = [('a', 'b'), ('b', 'c'), ('c', 'd')]
for edge in edges:
    dot.edge(*edge)

# Letzte Kante mit Label unterhalb der Kante
dot.edge('d', 'a', constraint='false')

# Display
display(dot)


```
