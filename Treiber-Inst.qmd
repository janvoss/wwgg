# Treiber des institutionellen Wandels

## Krise und Vertrauen

```{python}
#| message: false
#| warning: false
#| output: false

from graphviz import Digraph

dot = Digraph()

# Layout
dot.attr(rankdir='LR')

# Hauptknoten
dot.node('a', 'Normalzustand')
dot.node('d', 'Neuer Normalzustand')

# Funktion zum Erstellen eines Clusters
def create_cluster(dot, name, label, nodes, bold_node=None):
    with dot.subgraph(name=name) as cluster:
        cluster.attr(label=label, style='rounded', bgcolor='#F0F0F0')
        cluster.attr(rankdir='TB')  # Vertikale Ausrichtung (mittig)
        for node_id, node_label in nodes.items():
            if node_id == bold_node:
                cluster.node(node_id, f'{node_label}', fontname="times-bold")  # Fett
            else:
                cluster.node(node_id, f'{node_label}')

# Cluster für "Krise" (b1-b5)
crisis_nodes = {
    'b1': 'Ideologien',
    'b2': 'Wissenschaft',
    'b3': 'Zweifel',
    'b4': 'Dysfunktionalität',
    'b5': 'Exogene Schocks'
}
create_cluster(dot, name='cluster_crisis', label='Krise', nodes=crisis_nodes, bold_node='b3')

# Cluster für "Innovation" (c1-c5)
innovation_nodes = {
    'c1': 'Ideologien',
    'c2': 'Wissenschaft',
    'c3': 'Vertrauen',
    'c4': 'Interaktion',
    'c5': 'Persönlichkeiten'
}
create_cluster(dot, name='cluster_group', label='Innovation', nodes=innovation_nodes, bold_node='c3')

# Kanten
edges = [
    ('a', 'b3'),  # Verbindung von "Normalzustand" zu zentralem Knoten im "Krise"-Cluster
    ('b3', 'c3'),  # Verbindung von zentralem Knoten im "Krise"-Cluster zu zentralem Knoten im "Innovation"-Cluster
    ('c3', 'd'),  # Verbindung von zentralem Knoten im "Innovation"-Cluster zu "Neuer Normalzustand"
    ('d', 'a', {'constraint': 'false'})  # Rückkopplung
]

for edge in edges:
    dot.edge(edge[0], edge[1], **edge[2] if len(edge) > 2 else {})

#Datei erzeugen 
dot.format = 'svg'  # Format setzen
dot.render(filename='Blyth-Krise', cleanup=True)  # Erzeugt output.svg

```

![Institutionelle Erneuerung nach @blyth_great_2002](Blyth-Krise.svg)

## Zur Änderung unterischiedlicher Arten von Institutionen

```{python}
#| message: false
#| warning: false
#| output: false



from graphviz import Digraph


dot = Digraph()
dot.attr('node', width='2.2', shape='none', labeljust='c')
#dot.attr(nodesep='.2')
dot.attr(label='Treiber des institutionellen Wandels', labelloc='t',
          fontname="times-bold", fontsize="24", ranksep=".5")

# Konfiguration der Hauptknoten und Subnodes
main_nodes = {
    'A': ['Konvention', ['Variante A:\l intentionale Änderung\l (Programmiersprache)\l',
                         'Variante B:\l Evolutionäre, inkre-\l mentelle Änderung\l (natürliche Sprache)\l'
                         ]],
    'B': ['Ethische Regel', ['Änderung der\l - Werte\l - Restriktionen\l - Informationen\l'
                    ]],
    'C': ['Sitte', ['Änderung zunächst in \l Subpopulationen\l',
                    'Eventuell Kritische\l -Masse-Phänomen\l',
                    'Imitation vs. bewusste\l Werteänderung\l']],
    'D': ['Formelle private Regel',['Änderung durch\l zuständige Gremien\l -Ziele\l -Restriktionen\l -Informationen\l']],
    'E': ['Regel positiven Rechts', ['Mehrheitswille\l',
                             'Politische Ökonomie\l',
                             'Folgt typischerweise\l Änderung der Sitten\l']]
}

# Hauptknoten erstellen
for key in main_nodes:
    dot.node(key, main_nodes[key][0], shape='underline')

# Subnodes generieren und verbinden
max_subnodes = max(len(sub) for _, (_, sub) in main_nodes.items())

for i in range(max_subnodes):
    current_nodes = []

    for key, (label, subnodes) in main_nodes.items():
        if i < len(subnodes):
            node_id = f'{key}{i+1}'
            dot.node(node_id, subnodes[i])
            current_nodes.append(node_id)

            # Vertikale unsichtbare Verbindungen
            if i == 0:
                dot.edge(key, node_id, style='invis')
            else:
                prev_node = f'{key}{i}'
                dot.edge(prev_node, node_id, style='invis')

    # Horizontale Ausrichtung der Subnodes
  #  if current_nodes:
   #     with dot.subgraph() as s:
     #       s.attr(rank='same')
       #     for node in current_nodes:
        #        s.node(node)

#Datei erzeugen 
dot.format = 'svg'  # Format setzen
dot.render(filename='Treiber-inst-wandel', cleanup=True)  # Erzeugt output.svg
```


![Treiber des institutionellen Wandels](Treiber-inst-wandel.svg)


## Die Rolle von Ideen

```{python}
#| output: false

import graphviz


# Graph mit 'circo'-Engine für kreisförmige Anordnung mit kleinerem Abstand
g = graphviz.Digraph('satelliten', engine='circo' #,
                #  graph_attr={'nodesep': '0.01', 'ranksep': '0.01'}
)  # Abstände angepasst

# Zentraler Knoten: größer, fett, zentriert
g.node('Zentrum', 'Ideen',
       fontsize='20',
       fontname='Times-Bold',  # Fett durch spezifische Schriftart
      shape='circle',
       width='2'
)  # Größe angepasst

# Satelliten-Knoten mit eigenen Stichpunkten
g.node('A', 'Reduzieren\nUnsicherheit')
g.node('B', 'Fördern\nKoalitionsbildung')
g.node('C', 'Ermöglichen das\nInfragestellen\nbestehender Institutionen')
g.node('D', 'Bieten Ressourcen\nfür die Konstruktion\nneuer Institutionen')
g.node('E', 'Koordinieren\nErwartungen\nreproduzieren Stabilität')

# Alle Kanten unsichtbar machen (aber kürzer)
g.edge('Zentrum', 'A' #, arrowhead='vee', arrowsize='2', style='arrow'
)  # len für Abstand
g.edge('Zentrum', 'B')
g.edge('Zentrum', 'C')
g.edge('Zentrum', 'D')
g.edge('Zentrum', 'E')

#Datei erzeugen 
g.format = 'svg'  # Format setzen
g.render(filename='Ideen', cleanup=True)  # Erzeugt output.svg
```

![Die Rolle von Ideen nach @blyth_great_2002](Ideen.svg)

## Die Rolle von Heuristiken

- Heuristiken sind vereinfachte Erklärungsmodelle für Zusammehnänge 

- Letztlich sind beruhen *alle* Erklärungen auf Heurisitken

```{python}
#| output: false

import graphviz

g = graphviz.Digraph('satelliten', engine='circo')

# Zentrum mit spezieller Farbe
g.node('Zentrum', 'Heuristiken',
       fontsize='20',
       fontname='Times-Bold',
       shape='circle',
       width='2',
       style='filled',
       fillcolor='#00BFFF')

# Satelliten-Knoten mit Farbe #00FFFF
satellites = [
    ('A', 'Plausibel/\n nicht im Widerspruch\l zum Alltag,'),
    ('B', 'In der Peer Group geteilt'),
    ('C', 'Durch Autoritäten bestätigt'),
    ('D', 'Passend zum Selbstbild'),
    ('E', 'Passend zum Weltbild'),
    ('F', 'Hilfreich für\l normatives Problem')
]

for node_id, label in satellites:
    g.node(node_id, label, style='filled', fillcolor='#00FFFF', penwidth='1')

# Verbindungen zum Zentrum
g.edges([(node_id, 'Zentrum') for node_id, _ in satellites])

#Datei erzeugen 
g.format = 'svg'  # Format setzen
g.render(filename='Heuristiken', cleanup=True)  # Erzeugt output.svg
```

![Heuristiken](Heuristiken.svg)