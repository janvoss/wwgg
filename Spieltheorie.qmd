# Spieltheoretische Ansätze zur Erklärung institutionellen Wandels

## Zur Befriedung des Anarchiezustandes

Das Folgende basiert auf @hillman_nietzschean_2004


### Das Grundmodell

- Gesellschaft mit zwei Gruppen:  
  - die Starken (strong)
  - die Schwachen (weak)
  
- Die Schwachen können entweder
  - Subsistenzwirtschaft betreiben (Auszahlung $a$) und Freizeit genießen (Auszahlung $h$,  Gesamtauszahlung: $b=a+h$) oder
  - Fleißig sein und für den Verzicht auf Freizeit höhere materielle Erträge erzielen (Auszahlung $r$ mit $r>b$)
  
- Die Starken können entweder  
  - ihre Felder bestellen (Ertrag: $R$) oder
  - zusätzlich die Schwachen überfallen. Kosten
des Überfalls $V$

- Wenn die Schwachen produktiv waren, dann haben die Starken aus einem
Überfall den Nutzen: $A=\left(R-V\right)+\left(r-a\right)$ mit $A>R$;
$V<\left(r-a\right)$

- Wenn die Schwachen nicht produktiv waren, erhalten die Starken die Auszahoung $B=\left(R-V\right)$

- Ranking der Schwachen $r>b>a$

- Ranking der Starken: $A>R>B$

- Wohlfahrt wird maximiert bei $W=\left(R+r\right)$

```{python}
#| message: false
#| warning: false

# Matrix mit Symbolen

from lets_plot import *

LetsPlot.setup_html()

ggplot() + \
geom_text(x=- .5, y= 2   , label='A') +\
geom_text(x=-1.5, y=  .75, label='a') +\
geom_text(x=- .5, y=-1   , label='B') +\
geom_text(x=-1.5, y=-2.25, label='b') +\
geom_text(x= 1.5, y= 2   , label='R') +\
geom_text(x=  .5, y=  .75, label='r') +\
geom_text(x= 1.5, y=-1   , label='R') +\
geom_text(x=  .5, y=-2.25, label='b') +\
geom_text(x=-1  , y= 3.3 , label='überfallen')+\
geom_text(x= 1  , y= 3.3 , label='friedlich')+\
geom_text(x=-2.2, y= 1.375, angle=90, label='fleißig')+\
geom_text(x=-2.2, y=-1.625, angle=90, label='Subsistenzwirtschaft')+\
geom_text(x= 0 , y= 4 ,
          fontface = "bold", label='Die Starken')+\
geom_text(x=-2.7 , y= 0 , angle=90,
          fontface = "bold", label='Die Schwachen')+\
geom_segment(x=-2,  xend= 2, y= 0, yend= 0) +\
geom_segment(x=-2,  xend= 2, y= 3, yend= 3) +\
geom_segment(x=-2,  xend= 2, y=-3, yend=-3) +\
geom_segment(x=-2,  xend=-2, y=-3, yend= 3) +\
geom_segment(x= 0,  xend= 0, y=-3, yend= 3) +\
geom_segment(x= 2,  xend= 2, y=-3, yend= 3) +\
theme_void()+\
labs(title='Auszahlungen für die Schwachen und die Starken' ,
     caption = 'Hillman (2004)'
)

```
 
### Das Gleichgewicht

- Kein Gleichgewicht in reinen Strategien

- In jeder Zelle möchte mindestens eine Partei abweichen.

- Aber: Gleichgewicht in gemischten Strategien

- Wenn es entweder kein Nash-Gleichgewicht (in reinen Strategien) gibt oder mehrere Nash-Gleichgewichte, dann lässt sich das Handeln der Spielenden nicht gut vorhersagen

- Aus der Perspektive jedes Spielenden ist das Handeln des Gegenübers eine Zufallsvariable. Mit einer bestimmten Wahrscheinlichkeit wählt das Gegenüber eine seiner Strategien.

- Den Zufall kann man aber näher charakterisieren, wenn man sich überlegt, **welche Wahrscheinlichkeiten ein rationales Gegenüber wählen würde**.

- Ein rationales Gegenüber wählt die Wahrscheinlichkeiten so, dass der spielende Akteur keine Möglichkeit mehr hat, seine Situation durch die Wahl seiner Strategie zu verbessern.

- **Jede spielende Person wählt die Wahrscheinlichkeiten für ihre Handlung also so, dass das jeweilige Gegenüber indifferent ist in - der Wahl seiner Handlungen**.

- Die Starken sind indifferent zwischen ihren beiden Strategien, wenn
gilt: $p_{w}A+\left(1-p_{w}\right)B=R$

- $\iff p_{w}^{*}=\frac{R-B}{A-B}=\frac{V}{r-a}$

- Die Schwachen sind indifferent, wenn gilt
- $p_s a + (1-p_s)r=b$

- $\iff p_{s}^{*}=\frac{r-b}{r-a}=1-\frac{h}{r-a}$

```{python}
#| message: false
#| warning: false
#| output: false

# Gemischte Strategien

# Wahrscheinlichkeiten ausrechnen

from sympy import Symbol, solve, Eq, simplify

symbols = [Symbol(name) for name in 'ABRabrp']
A, B, R, a, b, r, p = symbols  # Auspacken in verschiedene Variablen


#p_ü Wahrscheinlichkeit für Überfall
E_fl= p*a+(1-p)*r

E_S= b

sol = solve(Eq(E_fl, E_S), p)
print(sol[0])

#p_f Wahrscheinlichkeit für Fleiß

E_ü = p*A + (1-p)*B
E_fr = R

sol = solve(Eq(E_ü, E_fr),p)
print(sol[0])
```

Ein Zahlenbeispiel

```{python}
#| message: false
#| warning: false

# Zufallszahlen

import numpy as np
import random

random.seed(123)

while True:
    a = random.randint(1, 9)
   # B = random.randint(0, 9)
    r = random.randint(0, 9)
    R = random.randint(0, 9)
    h = random.randint(1, 9)
    V = random.randint(1, 9)

    b=a+h
    A=(R-V)+(r-a)
    B=R-V


    # Bedingungen prüfen
    cond1 = r > b > a
    cond2 = A > R > B

    # nicht nötig, aber für Erzählung
    cond3 = R > r

    # Wenn Bedingungen erfüllt ist, Schleife beenden
    if (cond1 and cond2 and cond3):
        break


# Matrix

from lets_plot import *

LetsPlot.setup_html()

ggplot() + \
geom_text(x=- .5, y= 2   , label=A) +\
geom_text(x=-1.5, y=  .75, label=a) +\
geom_text(x=- .5, y=-1   , label=B) +\
geom_text(x=-1.5, y=-2.25, label=b) +\
geom_text(x= 1.5, y= 2   , label=R) +\
geom_text(x=  .5, y=  .75, label=r) +\
geom_text(x= 1.5, y=-1   , label=R) +\
geom_text(x=  .5, y=-2.25, label=b) +\
geom_text(x=-1  , y= 3.3 , label='überfallen')+\
geom_text(x= 1  , y= 3.3 , label='friedlich')+\
geom_text(x=-2.2, y= 1.375, angle=90, label='fleißig')+\
geom_text(x=-2.2, y=-1.625, angle=90, label='Subsistenzwirtschaft')+\
geom_text(x= 0 , y= 4 ,
          fontface = "bold", label='Die Starken')+\
geom_text(x=-2.7 , y= 0 , angle=90,
          fontface = "bold", label='Die Schwachen')+\
geom_segment(x=-2,  xend= 2, y= 0, yend= 0) +\
geom_segment(x=-2,  xend= 2, y= 3, yend= 3) +\
geom_segment(x=-2,  xend= 2, y=-3, yend=-3) +\
geom_segment(x=-2,  xend=-2, y=-3, yend= 3) +\
geom_segment(x= 0,  xend= 0, y=-3, yend= 3) +\
geom_segment(x= 2,  xend= 2, y=-3, yend= 3) +\
theme_void()+\
labs(title='Auszahlungen für die Schwachen und die Starken',
     subtitle=f"h={h}, V={V}",
     caption = 'Nach Hillman (2004)'
)



```

```{python}
#| message: false
#| warning: false

import numpy as np
import pandas as pd
from lets_plot import *
LetsPlot.setup_html()

# Parameter
numberofrounds = 400
#pw = 0.2   # Beispielwert, kann angepasst werden
#ps = 0.6   # Beispielwert, kann angepasst werden

ps = (b - r)/(a - r)
pw = (-B + R)/(A - B)

# DataFrame erzeugen (Reproduzierbarkeit durch seed)
np.random.seed(123)
df = pd.DataFrame({
    'W': np.random.binomial(1, pw, numberofrounds),
    'S': np.random.binomial(1, (1-ps), numberofrounds)
})

# Ausgabe
# print(df.head())

# Grafik
plot = (
    ggplot(df, aes(x='S', y='W')) +
    geom_jitter(width=0.4, height=0.4, alpha=0.5, color='red') +
    scale_x_continuous(breaks=[0, 1], labels=[f"überfallen {round(ps, 2)}", f"friedlich {round((1-ps),2)}"]) +
    scale_y_continuous(breaks=[0, 1], labels=[f"Subsistenzwirtschaft {round((1-pw),2)}", f"fleißig {round(pw, 2)}"]) +
    theme_light() +
    theme(panel_grid_major=None, panel_grid_minor=None)+ 
    labs(title="Häufigkeiten in gemischten Strategien",
    x="Die Starken",
    y="Die Schwachen")
)
plot

```

### Die Ineffizienz des Gleichgewichts

- Das Gleichgewicht in gemischten Strategien ist ineffizient.

   - Erwartungswert für die Starken: $R$
   - Erwartungswert für die Schwachen: $b$

- Effizient wäre eine Summe der erwarteten Auszahlungen von $R+r>R+b$

### Die Idee eines Friedensvertrags

- Die Starken können den Schwachen einen Vertrag anbieten

  - Die Starken verzichten zukünftig auf den Überfall

  - Dafür bekommen sie jede Periode ein Schutzgeld $\mu >0$

- Für die Schwachen ist das eine Verbesserung,  sofern $\mu < r-b$

- Für die Starken muss gelten, dass der Gegenwartswert der regelmäßigen Zahlung des Schutzgelds größer ist als der Gegenwartswert des einmalig erfolgreichen Überfalls und des folgenden Rückfalls ins Anarchie-Gleichgewicht

- $\frac{R+ \mu}{i}\geq A + \frac{R}{i}-R \iff \mu \geq i(A-R)$

- Der Friedensvertrag ist also umso wahrscheinlicher, je niedriger $i$ ist.

```{python}
#| message: false
#| warning: false



# Schnittpunkt berechnen
schnittpunkt = (r - b) / (A - R)

# Werte von 0 bis Schnittpunkt
i = np.linspace(0, schnittpunkt, 101)

# Vollständige i-Werte (0 bis 1)
i_full = np.linspace(0, 1, 101)
df_full = pd.DataFrame({'i': i_full})
df_full['mu'] = df_full['i'] * (A - R)
df_full['mu_max'] = r - b  # Konstanter Wert

# Ribbon-Daten nur bis Schnittpunkt
df_ribbon = df_full[df_full['i'] <= schnittpunkt].copy()

plot = (
    ggplot()
    # Fläche NUR bis Schnittpunkt
    + geom_ribbon(aes(x='i', ymin='mu', ymax='mu_max'),
            data=df_ribbon, fill='#4d7faf', alpha=0.3, inherit_aes=False)
    # Linien mit VOLLSTÄNDIGEN Daten
    + geom_line(aes(x='i', y='mu'), data=df_full, color='darkgreen', size=1)
    + geom_line(aes(x='i', y='mu_max'), data=df_full, color='red', size=1)
    + theme_light()
    + labs(title="Zulässige Werte für \(\mu\)",
               x="Zeitpräferenzrate \(i\)",
               y= "\(\mu\)")
)

plot
```

## Evolutionäre Spieltheorie

### Ausgangspunkt hier: Das Gefangenendilemma

```{python}
#| message: false
#| warning: false

# Python


A= 3
a= 3
B= 5
b= 0
C= 0
c= 5
D= 1
d= 1

# https://github.com/Axelrod-Python/Axelrod/blob/dev/axelrod%2Fgame.py

from lets_plot import *

LetsPlot.setup_html()

ggplot() + \
geom_text(x=- .5, y= 2   , label=a) +\
geom_text(x=-1.5, y=  .75, label=A) +\
geom_text(x=- .5, y=-1   , label=b) +\
geom_text(x=-1.5, y=-2.25, label=B) +\
geom_text(x= 1.5, y= 2   , label=c) +\
geom_text(x=  .5, y=  .75, label=C) +\
geom_text(x= 1.5, y=-1   , label=d) +\
geom_text(x=  .5, y=-2.25, label=D) +\
geom_text(x=-1  , y= 3.3 , label='kooperieren')+\
geom_text(x= 1  , y= 3.3 , label='defektieren')+\
geom_text(x=-2.2, y= 1.375, angle=90, label='kooperieren')+\
geom_text(x=-2.2, y=-1.625, angle=90, label='defektieren')+\
geom_text(x= 0 , y= 4 ,
          fontface = "bold", label='Spieler 2')+\
geom_text(x=-2.7 , y= 0 , angle=90,
          fontface = "bold", label='Spieler 1')+\
geom_segment(x=-2,  xend= 2, y= 0, yend= 0) +\
geom_segment(x=-2,  xend= 2, y= 3, yend= 3) +\
geom_segment(x=-2,  xend= 2, y=-3, yend=-3) +\
geom_segment(x=-2,  xend=-2, y=-3, yend= 3) +\
geom_segment(x= 0,  xend= 0, y=-3, yend= 3) +\
geom_segment(x= 2,  xend= 2, y=-3, yend= 3) +\
theme_void()+\
labs(title='Auszahlungen in einem Gefangenendilemma',
     caption='Axelrod (1980)')
```

\- Ineffizientes Nash-Gleichgewicht bei defektieren/defektieren

### Wettbewerb der Strategien

- 3 Ideen dazu. Was ist, wenn (Axelrod, 1980)

   - Spieler auf bestimmte Strategien festgelegt sind,   
   - auch komplexe Strategien über mehrere Runden hinweg möglich sind,   
   - Strategien sich je nach Erfolg evolutionär durchsetzen können?

- Axelrod-Wettbewerbe

  - Spieler mit (gleichen oder) unterschiedlichen Strategien treten gegeneinander an.

  - Alle Paare spielen mehrere Runden (hier implementiert: 200) gegeneinander

  - Die (durchschnittliche) Auszahlung wird ausgegeben


- Hier: immer kooperieren, immer defektieren und Tit for Tat


- Grundsätzliche Auszahlungen

```{python}
#| message: false
#| warning: false

import axelrod as axl
players = [axl.Cooperator(),
           axl.Defector(),
          # axl.TitForTat(),
           axl.TitForTat() #, axl.Random()
]
# players.append(axl.Random())
tournament = axl.Tournament(players)
results = tournament.play()

```

```{python}
#| message: false
#| warning: false

import matplotlib.pyplot as plt
plot = axl.Plot(results)
p = plot.payoff()
plt.title("Grundsätzliche Auszahlungen der Wettbewerbe")
p.show()

```

#### "Immer defektieren" gegen "Immer kooperieren"

```{python}
#| message: false
#| warning: false

import axelrod as axl
players = [axl.Cooperator(),
           axl.Defector(),
          # axl.TitForTat(),
         #  axl.TitForTat() #, axl.Random()
]
# players.append(axl.Random())
tournament = axl.Tournament(players)
results = tournament.play()

plot = axl.Plot(results)
p = plot.boxplot()
plt.title("Auszahlungen der Wettbewerbe")
p.show()

import axelrod as axl
players = [axl.Cooperator(),
           axl.Cooperator(),
           axl.Defector(),
          # axl.TitForTat(),
         #  axl.TitForTat() #, axl.Random()
]
# players.append(axl.Random())
tournament = axl.Tournament(players)
results = tournament.play()

plot = axl.Plot(results)
p = plot.boxplot()
plt.title("Auszahlungen der Wettbewerbe")
p.show()

```

- Spieler vom Typ "immer kooperieren" profitieren (ein bisschen) voneinander

```{python}
#| message: false
#| warning: false

import axelrod as axl
players = [axl.Cooperator(),
           axl.Cooperator(),
           axl.Defector(),
           axl.Defector()
          # axl.TitForTat(),
         #  axl.TitForTat() #, axl.Random()
]
# players.append(axl.Random())
tournament = axl.Tournament(players)
results = tournament.play()

plot = axl.Plot(results)
p = plot.boxplot()
plt.title("Auszahlungen der Wettbewerbe")
p.show()

```

- Spieler vom Typ "defektiere immer" schaden sich gegenseitig

### Tit for Tat

- Spieler vom Typ "Tit for Tat"

   - kooperieren in der ersten Runde
   - kopieren die Strategie ihrer Gegenspieler ab der zweiten Runde
   
```{python}
#| message: false
#| warning: false

import axelrod as axl
players = [axl.Cooperator(),
          # axl.Cooperator(),
         #  axl.Defector(),
          # axl.Defector()
           axl.TitForTat(),
         #  axl.TitForTat() #, axl.Random()
]
# players.append(axl.Random())
tournament = axl.Tournament(players)
results = tournament.play()

plot = axl.Plot(results)
p = plot.boxplot()
plt.title("Auszahlungen der Wettbewerbe")
p.show()

```

- Im Spiel gehen "immer kooperieren" spielt "Tit for Tat" kooperativ

```{python}
#| message: false
#| warning: false

import axelrod as axl
players = [#axl.Cooperator(),
          # axl.Cooperator(),
          axl.Defector(),
          # axl.Defector()
           axl.TitForTat(),
         #  axl.TitForTat() #, axl.Random()
]
# players.append(axl.Random())
tournament = axl.Tournament(players)
results = tournament.play()

plot = axl.Plot(results)
p = plot.boxplot()
plt.title("Auszahlungen der Wettbewerbe")
p.show()

```

- Gegen "immer defektieren" kooperiert TfT in der ersten Runde, dann nicht mehr

- Er erhält eine etwas geringere Auszahlung als "immer defektieren"

```{python}
#| message: false
#| warning: false

import axelrod as axl
players = [#axl.Cooperator(),
          # axl.Cooperator(),
          axl.Defector(),
          # axl.Defector()
           axl.TitForTat(),
          axl.TitForTat() #, axl.Random()
]
# players.append(axl.Random())
tournament = axl.Tournament(players)
results = tournament.play()

plot = axl.Plot(results)
p = plot.boxplot()
plt.title("Auszahlungen der Wettbewerbe")
p.show()
```

- TfT-Spieler profitieren voneinander

### Evolution als Moran-Prozess

- In einem Moran Prozess spielen alle Spieler (mit üblicherweise zunächst unterschiedlichen Typen) mehrere Runden gegeneinander.

- In jeder Runde interagiert jeder Spieler mit jedem anderen Spieler. Die Auszahlungen jedes Spielers werden notiert.

- In jeder Runde wird ein zufällig ausgewählter Spieler entfernt (er "stirbt")

- Ein neuer Spieler wird dem Spiel hinzugefügt.  Der Typ dieses Spielers wird zufällig festgelegt. In diesen Zufallsprozess werden die Wahrscheinlichkeiten aus dem "Erfolg" der Spieltypen in dieser Runde zugrundegelegt
. Erfolgreiche Typen vermehren sich also schneller als weniger erfolgreiche Typen.

#### "Immer defektieren" verdrängt "immer kooperieren"

```{python}
#| message: false
#| warning: false

%matplotlib inline
import itertools
import random

import matplotlib.pyplot as plt
import axelrod as axl
plt.rcParams['figure.figsize'] = (10, 10)

# Create a population of size N
#N = 20
#players = []
#for _ in range(N):
#    player = random.choice([axl.Cooperator,
#                            axl.Random,
#                            axl.TitForTat,
#                            axl.Defector])
#   players.append(player())

# random.seed(123)

players = (
    [axl.Cooperator() for _ in range(18)] +
  #  [axl.Random() for _ in range(5)] +
  #  [axl.TitForTat() for _ in range(5)] +
    [axl.Defector() for _ in range(2)]
)


# Run the process. Eventually there will be only
# one player type left.
mp = axl.MoranProcess(players=players, turns=200, seed=123)
mp.play()
print("Es setzt sich durch:", mp.winning_strategy_name)

# Plot the results

player_names = mp.populations[0].keys()

plot_data = []
labels = []
for name in player_names:
    labels.append(name)
    values = [counter[name] for counter in mp.populations]
    plot_data.append(values)
    domain = range(len(values))

plt.stackplot(domain, plot_data, labels=labels)
plt.legend()
plt.xlabel("Runden")
plt.ylabel("Anzahl der Individuen")
plt.title("Evolution mit Moran-Prozess")
plt.show()

```

#### "Tit for Tat" setzt sich durch

```{python}
#| message: false
#| warning: false

# Create a population of size N
#N = 20
#players = []
#for _ in range(N):
#    player = random.choice([axl.Cooperator,
#                            axl.Random,
#                            axl.TitForTat,
#                            axl.Defector])
#   players.append(player())

# random.seed(123)

players = (
    [axl.Cooperator() for _ in range(10)] +
  #  [axl.Random() for _ in range(5)] +
   [axl.TitForTat() for _ in range(5)] +
    [axl.Defector() for _ in range(5)]
)


# Run the process. Eventually there will be only
# one player type left.
mp = axl.MoranProcess(players=players, turns=200, seed=128)
mp.play()
print("Es setzt sich durch:", mp.winning_strategy_name)

# Plot the results

player_names = mp.populations[0].keys()

plot_data = []
labels = []
for name in player_names:
    labels.append(name)
    values = [counter[name] for counter in mp.populations]
    plot_data.append(values)
    domain = range(len(values))

plt.stackplot(domain, plot_data, labels=labels)
plt.legend()
plt.xlabel("Runden")
plt.ylabel("Anzahl der Individuen")
plt.title("Evolution mit Moran-Prozess")
plt.show()

```

#### "Tit for Tat" wird verdrängt - und "immer defektieren" setzt sich durch

```{python}
#| message: false
#| warning: false

# Create a population of size N
#N = 20
#players = []
#for _ in range(N):
#    player = random.choice([axl.Cooperator,
#                            axl.Random,
#                            axl.TitForTat,
#                            axl.Defector])
#   players.append(player())

# random.seed(123)

players = (
    [axl.Cooperator() for _ in range(10)] +
  #  [axl.Random() for _ in range(5)] +
   [axl.TitForTat() for _ in range(5)] +
    [axl.Defector() for _ in range(5)]
)


# Run the process. Eventually there will be only
# one player type left.
#125
mp = axl.MoranProcess(players=players, turns=200, seed=77)
mp.play()
print("Es setzt sich durch:", mp.winning_strategy_name)

# Plot the results

player_names = mp.populations[0].keys()

plot_data = []
labels = []
for name in player_names:
    labels.append(name)
    values = [counter[name] for counter in mp.populations]
    plot_data.append(values)
    domain = range(len(values))

plt.stackplot(domain, plot_data, labels=labels)
plt.legend()
plt.xlabel("Runden")
plt.ylabel("Anzahl der Individuen")
plt.title("Evolution mit Moran-Prozess")
plt.show()

```

