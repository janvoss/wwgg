# Treiber des technologischen und des wirtschaftlichen Wandels

## Ökonomische Anreize und gesellschaftliche Wirkung

### Wisssenschaftlicher Wettbewerb

- Innovationsanreize (intrinsisch, karrieregetrieben)

- Marktfähigkeit der Innovationen abhängig von weiteren Bedingungen

- Schnelle Verbreitung von neuem Wissen im Wissenschaftssystem

- ggf. strategische Unterstützung durch den Staat (offen/gelenkt)

### Wirtschaftlicher Wettbewerb

- Unternehmerische Innovationsanreize

- Fokus auf Marktfähigkeit

- Verbreitung der Innovationen über Produkte oder Prozesse


### Gesellschaftliche Wirkung

- Pioniercharakter der Innovationen

  - Keine Vorherige Zustimmung
  
  - Risiko/Unsicherheit über Wirkungr
  
  - Hohe Gewinne möglich
  
- Grenzüberschreitende Wirkung

  - Verbreitung über offene Produkt- und/oder Faktormärkte
  
  - Nationaler vs. internationaler Regulierungsrahmen ($\rightarrow$ Global Governance)

## Technologische Paradigmen und Paradigmenwechsel

```{python}

from graphviz import Digraph
from IPython.display import display

dot = Digraph()

# Layout
dot.attr(rankdir='LR')

# Hauptcluster erstellen
with dot.subgraph(name='cluster_abc') as cluster:
    cluster.attr(label='Paradigma', style='rounded', bgcolor='#F0F0F0')

    # Knoten außerhalb des Subclusters
    cluster.node('a', 'Basisdesign')
    cluster.node('c', 'Engpass')

    # Subcluster für "Weiterentwicklung"
    with cluster.subgraph(name='cluster_b') as subcluster:
        subcluster.attr(label='Weiterentwicklung', style='rounded', bgcolor='#E8E8E8')
        for node_id, label in {'b': 'inkrementelle Innovationen',
                               'b1': 'learning by doing',
                               'b2': 'implizites Wissen'}.items():
            subcluster.node(node_id, label)

        # Vertikale Anordnung der Knoten im Subcluster
        subcluster.body.append('{rank=same; b2 -> b1 -> b[style=invis]}')

# Einzelner Knoten außerhalb des Hauptclusters
dot.node('d', 'Paradigmenwechsel')

# Kanten definieren
edges = [('a', 'b'), ('b', 'c'), ('c', 'd')]
for edge in edges:
    dot.edge(*edge)

# Letzte Kante mit Label unterhalb der Kante
dot.edge('d', 'a', constraint='false')

# Display
display(dot)


```
