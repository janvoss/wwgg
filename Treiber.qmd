# Treiber des technologischen und des wirtschaftlichen Wandels

## Ökonomische Anreize und gesellschaftliche Wirkung

### Wisssenschaftlicher Wettbewerb

- Innovationsanreize (intrinsisch, karrieregetrieben)

- Marktfähigkeit der Innovationen abhängig von weiteren Bedingungen

- Schnelle Verbreitung von neuem Wissen im Wissenschaftssystem

- ggf. strategische Unterstützung durch den Staat (offen/gelenkt)

### Wirtschaftlicher Wettbewerb

- Unternehmerische Innovationsanreize

- Fokus auf Marktfähigkeit

- Verbreitung der Innovationen über Produkte oder Prozesse


### Gesellschaftliche Wirkung

- Pioniercharakter der Innovationen

  - Keine Vorherige Zustimmung
  
  - Risiko/Unsicherheit über Wirkungr
  
  - Hohe Gewinne möglich
  
- Grenzüberschreitende Wirkung

  - Verbreitung über offene Produkt- und/oder Faktormärkte
  
  - Nationaler vs. internationaler Regulierungsrahmen ($\rightarrow$ Global Governance)
  
## Patentanmeldungen


```{r Patente, echo=T, warning=F, message=F, cache=T, eval=T, include=F}

# Patente

library(tidyverse)

# Fetch the data
df <- read.csv("https://ourworldindata.org/grapher/patent-applications-per-million.csv?v=1&csvType=full&useColumnShortNames=true")

# Fetch the metadata
#metadata <- fromJSON("https://ourworldindata.org/grapher/patent-applications-per-million.metadata.json?v=1&csvType=full&useColumnShortNames=true")

df <- df %>% filter(!grepl('World',     Entity),
                    !grepl('countries', Entity))

# Fetch the data
df_patabs <- read.csv("https://ourworldindata.org/grapher/annual-patent-applications.csv?v=1&csvType=full&useColumnShortNames=true")

# Fetch the metadata
#metadata <- fromJSON("https://ourworldindata.org/grapher/annual-patent-applications.metadata.json?v=1&csvType=full&useColumnShortNames=true")

df <- left_join(df, df_patabs)

# gdp Daten herunterladen und verbinden


# Fetch the data
df_gdppc <- read.csv("https://ourworldindata.org/grapher/gdp-per-capita-worldbank.csv?v=1&csvType=full&useColumnShortNames=true")

# Fetch the metadata
#metadata <- fromJSON("https://ourworldindata.org/grapher/gdp-per-capita-worldbank.metadata.json?v=1&csvType=full&useColumnShortNames=true")

df <- left_join(df, df_gdppc)

# gdp

df_gdp <- read.csv("https://ourworldindata.org/grapher/gdp-worldbank.csv?v=1&csvType=full&useColumnShortNames=true")

# Fetch the metadata
#metadata <- fromJSON("https://ourworldindata.org/grapher/gdp-worldbank.metadata.json?v=1&csvType=full&useColumnShortNames=true")

df <- left_join(df, df_gdp)

# labels vergeben

df <- df %>%
      group_by(Year) %>%
      mutate(label_abs = if_else(min_rank(desc(ip_pat_resd))        <= 10, Entity, NA),
             label_rel = if_else(min_rank(desc(patents_per_million)) <= 10, Entity, NA))

```

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(ggrepel)

options(scipen = 999)

df %>% filter(Year== max(df$Year)) %>%
  ggplot(aes(ny_gdp_mktp_pp_kd/1000000000, ip_pat_resd, label=label_abs)) +
    geom_point()+
    geom_text_repel()+
    scale_x_log10() +
    scale_y_log10()+
    geom_smooth(method='lm',
                formula = y ~ x + I(x^2))+
    theme_light()+
    labs(title="Patentanmeldungen in ausgewählten Staaten",
         x="Bruttoinlandsprodukt (Mrd. $, KKP)",
         y="Patentanmelungen von Einwohnern",
   caption="Abbildung: Jan S. Voßwinkel, Daten: Ourworldindata.org")

```


```{r}
#| warning: false
#| message: false

library(tidyverse)

options(scipen = 999)

df %>% filter(Year== max(df$Year)) %>%
  ggplot(aes(ny_gdp_pcap_pp_kd, patents_per_million,
             label= label_rel)) +
    geom_point()+
    geom_text_repel()+
    scale_x_log10() +
    scale_y_log10()+
    geom_smooth(method='lm',
                formula = y ~ x + I(x^2))+
    theme_light()+
    labs(title="Patentanmeldungen pro Mio Einwohner",
         x    = "Bruttoinlandsprodukt pro Kopf ($, KKP)",
         y    = "Patentanmeldungen pro Mio Einwohner",
       caption= "Abbildung: Jan S. Voßwinkel, Daten: Ourworldindata.org")



```


```{r Patente2, echo=F, warning=F, message=F, cache=T, eval=T}

# Patente

library(tidyverse)
library(wbstats)

df <- wb_data(c("IP.PAT.RESD", 
                "NY.GDP.MKTP.KD",
                "SP.POP.TOTL"))

p <- df %>% 
  filter(date==2020) %>% 
  ggplot(aes(x=NY.GDP.MKTP.KD/SP.POP.TOTL, y=IP.PAT.RESD/SP.POP.TOTL, group=country #für labels in ggplotly
             ))+
  geom_point(color="red")+
  geom_smooth(aes(group=NULL, # weight=SP.POP.TOTL
                  ))+
  scale_x_continuous(labels= function(x) format(x,scientific = F) , 
                     trans = "log10"
  )+
  scale_y_continuous(labels= function(x) format(x*1000000,scientific = F) , 
                     trans = "log10"
  )+
  labs(title= "Patentanmeldungen durch Einwohner pro 1 Mio Einwohner, 2020",
       x="Bruttoinlandsprodukt pro Kopf",
       y= "Patentanmeldungen durch Inländer pro 1 Mio Einwohner")
                     
# p

library(plotly)

p1 <- ggplotly(p)%>%
  config(displaylogo = F) %>% 
  layout(margin = list(l = 50, r = 50, b = 100, t = 50),
         annotations = list(x = 1, y = -0.3, text =  paste('Abbildung: Jan S. Voßwinkel; Daten: World Bank; Datenabruf:', Sys.Date(), sep = " "),
                            xref='paper', yref='paper', showarrow = F, 
                            xanchor='right', yanchor='auto', xshift=0, yshift=0,
                            font = list(size = 11)))

# p1

```


## Weltwirtschaftliche` Integration

```{r}
#| include: false
#| message: false
#| warning: false

library(tidyverse)


#library(jsonlite)

# Fetch the data
df <- read.csv("https://ourworldindata.org/grapher/trade-as-share-of-gdp.csv?v=1&csvType=full&useColumnShortNames=true")

# Fetch the metadata
#metadata <- fromJSON("https://ourworldindata.org/grapher/trade-as-share-of-gdp.metadata.json?v=1&csvType=full&useColumnShortNames=true")

# Filtern, um Ländergruppen herauszuwerfen (Achtung, dann auch World und EU 27 weg)

df <- df %>% filter(!grepl('27',        Entity),
                    !grepl('WB',        Entity),
                    !grepl('World',     Entity),
                    !grepl('countries', Entity))

# Zeitreihen vorbereiten
4
Countries_of_interest <- c('United States', 'Germany', 'China', 'France',
                            'India', 'Poland', 'Russia'#, 'European Union (27)'
                            )


```


```{r}
#| message: false
#| warning: false

library(tidyverse)
library(ggrepel)
library(quantreg)
        
        options(scipen=999)

df %>% filter(Entity %in% Countries_of_interest) %>%
        ggplot(aes(Year, ne_trd_gnfs_zs#, color= Entity
        ))+
 #             geom_line(data=df, aes(group=Entity),  color='gray', alpha=.5)+
              geom_line(aes(color=Entity))+
              #geom_quantile(data=df, aes(Year, ne_trd_gnfs_zs))+
             # scale_y_log10()+
              #coord_cartesian(ylim=c(5, 200))+ # nur interessant, wenn Gesamtheit der Beobachtungen abgebildet werden soll
              theme_light()+
              labs(title='Handelsoffenheit ausgewählter Staaten',
                       x= 'Jahr',
                       y= 'Handelsoffenheit ((Ex+Im)/BIP)',
                   color= 'Staaten',
                 caption= 'Abbildung Jan S. Voßwinkel,  Daten: Ourworldindata.org,  Tabelle trade-as-share-of-gdp')


df %>% filter(Entity %in% Countries_of_interest) %>%
        ggplot(aes(Year, ne_trd_gnfs_zs#, color= Entity
        ))+
              geom_line(data=df, aes(group=Entity),  color='gray', alpha=.5)+
              geom_line(aes(color=Entity))+
              geom_quantile(data=df, aes(Year, ne_trd_gnfs_zs))+
             # scale_y_log10()+
              coord_cartesian(ylim=c(5, 200))+ # nur interessant, wenn Gesamtheit der Beobachtungen abgebildet werden soll
              theme_light()+
              labs(title='Handelsoffenheit ausgewählter Staaten',
                       x= 'Jahr',
                       y= 'Handelsoffenheit ((Ex+Im)/BIP)',
                   color= 'Staaten',
                 caption= 'Abbildung Jan S. Voßwinkel,  Daten: Ourworldindata.org,  Tabelle trade-as-share-of-gdp')



```

## Technologische Paradigmen und Paradigmenwechsel

```{python}
#| output: false

from graphviz import Digraph

dot = Digraph()

# Layout
dot.attr(rankdir='LR')

# Hauptcluster erstellen
with dot.subgraph(name='cluster_abc') as cluster:
    cluster.attr(label='Paradigma', style='rounded', bgcolor='#F0F0F0')

    # Knoten außerhalb des Subclusters
    cluster.node('a', 'Basisdesign')
    cluster.node('c', 'Engpass')

    # Subcluster für "Weiterentwicklung"
    with cluster.subgraph(name='cluster_b') as subcluster:
        subcluster.attr(label='Weiterentwicklung', style='rounded', bgcolor='#E8E8E8')
        for node_id, label in {'b': 'inkrementelle Innovationen',
                               'b1': 'learning by doing',
                               'b2': 'implizites Wissen'}.items():
            subcluster.node(node_id, label)

        # Vertikale Anordnung der Knoten im Subcluster
        subcluster.body.append('{rank=same; b2 -> b1 -> b[style=invis]}')

# Einzelner Knoten außerhalb des Hauptclusters
dot.node('d', 'Paradigmenwechsel')

# Kanten definieren
edges = [('a', 'b'), ('b', 'c'), ('c', 'd')]
for edge in edges:
    dot.edge(*edge)

# Letzte Kante mit Label unterhalb der Kante
dot.edge('d', 'a', constraint='false')

#Datei erzeugen 
dot.format = 'svg'  # Format setzen
dot.render(filename='Technolog-Paradigmen', cleanup=True)  # Erzeugt output.svg


```

![Technologische Paradigmen](Technolog-Paradigmen.svg)